#include <bits/stdc++.h>
using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;
    
    Node(int d) {
        this->data = d;
        this->left = NULL;
        this->right = NULL;
    }
};

Node* createtree() {
    int value;
    cin >> value;
    if (value == -1) {
        return NULL;
    }
    Node* newNode = new Node(value);
    cout << "Left of Node " << newNode->data << ": ";
    newNode->left = createtree();
    cout << "Right of Node " << newNode->data << ": ";
    newNode->right = createtree();
    return newNode;
}

void preorder(Node* root) {
    if (root == NULL) {
        return;
    }
    cout << root->data << " ";
    preorder(root->left);
    preorder(root->right);
}

void inorder(Node* root) {
    if (root == NULL) {
        return;
    }
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

void postorder(Node* root) {
    if (root == NULL) {
        return;
    }
    postorder(root->left);
    postorder(root->right);
    cout << root->data << " ";
}

void levelorder(Node* root) {
    queue<Node*> q;
    q.push(root);
    while (!q.empty()) {
        int size = q.size();
        for (int i = 0; i < size; i++) {
            Node* temp = q.front();
            q.pop();
            if (temp->left) {
                q.push(temp->left);
            }
            if (temp->right) {
                q.push(temp->right);
            }
            cout << temp->data << " ";
        }
        cout << endl;
    }
}

void iterative_inorder(Node* root) {
    stack<Node*> s;
    Node* curr = root;
    while (curr != nullptr || !s.empty()) {
        while (curr != nullptr) {
            s.push(curr);
            curr = curr->left;
        }
        curr = s.top();
        s.pop();
        cout << curr->data << " ";
        curr = curr->right;
    }
    cout << endl;
}

void preOrder_Iterative(Node* root){
    if(root==nullptr){
        return;
    }

    stack<Node*> st;
    st.push(root);

    while(!st.empty()){
        Node* curr = st.top();
        st.pop();
        cout<< curr->data<< " ";

        if(curr->right){
            st.push(curr->right);
        }
        if(curr->left){
            st.push(curr->left);            }
        }

        cout << endl;
}


void iterative_postorder(Node* root) {
    if (root == nullptr) {
        return;
    }
    stack<Node*> st1, st2;
    st1.push(root);
    Node* curr;
    while (!st1.empty()) {
        curr = st1.top();
        st1.pop();
        st2.push(curr);
        if (curr->left) {
            st1.push(curr->left);
        }
        if (curr->right) {
            st1.push(curr->right);
        }
    }
    while (!st2.empty()) {
        curr = st2.top();
        st2.pop();
        cout << curr->data << " ";
    }
    cout << endl;
}

int height(Node* root) {
    if (root == NULL) {
        return 0;
    }
    int leftTree = height(root->left);
    int rightTree = height(root->right);
    return max(leftTree, rightTree) + 1;
}

Node* mirror(Node* root) {
    if (root == NULL) {
        return NULL;
    }
    Node* newNode = new Node(root->data);
    newNode->left = mirror(root->right);
    newNode->right = mirror(root->left);
    return newNode;
}

bool checkequal(Node* root1, Node* root2) {
    if (root1 == NULL && root2 == NULL) {
        return true;
    }
    if (root1 == NULL || root2 == NULL || root1->data != root2->data) {
        return false;
    }
    return (checkequal(root1->left, root2->left) && checkequal(root1->right, root2->right));
}

Node* clone(Node* root) {
    if (root == NULL) {
        return NULL;
    }
    Node* newNode = new Node(root->data);
    newNode->left = clone(root->left);
    newNode->right = clone(root->right);
    return newNode;
}

int main() {

    cout << "Enter value: ";
    Node* root = createtree();
    cout<<endl;

    cout << "Preorder(Recursive): ";
    preorder(root);
    cout<<endl;

    cout << "Inorder(Recursive): ";
    inorder(root);
    cout<<endl;

    cout << "Postorder(Recursive): ";
    postorder(root);
    cout<<endl;

    cout << "LevelOrder: ";
    levelorder(root);
    cout<<endl;

    cout << "Inorder(iterative): ";
    iterative_inorder(root);
    cout<<endl;

    cout << "preorder(iterative): ";
    preOrder_Iterative(root);
    cout<<endl;

    cout << "Postorder(iterative): ";
    iterative_postorder(root);
    cout<<endl;

    cout << "Height:" << height(root) << endl;

   
    Node* mirrorRoot = mirror(root);
    cout << "Mirror: ";
    inorder(mirrorRoot);
    cout<<endl;

    
    Node* cloneRoot = clone(root);
    cout<<"clone inorder: ";
    inorder(cloneRoot);
    cout<<endl;
    
    cout<<"equal?"<< (checkequal(root,mirrorRoot) ?"Yes":"No")<<endl;

    return 0;
}
