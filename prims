#include <bits/stdc++.h>
using namespace std;

class Graph {
public:
    int V; // Number of vertices
    vector<vector<int>> adjMatrix; // Adjacency matrix representation of graph
    
    Graph(int V); // Constructor to initialize the graph
    void addEdge(int u, int v, int weight); // Add an edge with a given weight
    void primMST(int st); // Function to find MST using Prim's Algorithm
};

// Constructor to initialize the graph with V vertices
Graph::Graph(int V) {
    this->V = V;
    adjMatrix.resize(V, vector<int>(V, INT_MAX)); // Initialize adjacency matrix with INT_MAX
}

// Function to add an edge between u and v with weight
void Graph::addEdge(int u, int v, int weight) {
    adjMatrix[u][v] = weight;
    adjMatrix[v][u] = weight; // Since the graph is undirected
}

void Graph::primMST(int st) {  
    vector<bool> inMST(V, false);
    
    // Include first vertex in MST
    inMST[st] = true;
    
    // Keep adding edges while number of included edges does not become V-1.
    int edge_count = 0, mincost = 0;
    while (edge_count < V - 1) {
        
        // Find minimum weight valid edge.  
        int min = INT_MAX, a = -1, b = -1;
        for (int i = 0; i < V; i++) {
            if (inMST[i]) {
                for (int j = 0; j < V; j++) {               
                    if (!inMST[j] && adjMatrix[i][j] < min) {
                        min = adjMatrix[i][j];
                        a = i;
                        b = j;
                    }
                }
            }
        }
        if (a != -1 && b != -1) {
            printf("Edge %d:(%d, %d) cost: %d \n", edge_count++, a, b, min);
            mincost += min;
            inMST[b] = true;
        }
    }
    printf("\n Minimum cost= %d \n", mincost);
}
 
// Driver program to test above function
int main() {   
    int V, E;
    cout << "Enter number of vertices: ";
    cin >> V;
    cout << "Enter number of edges: ";
    cin >> E;
    
    Graph g(V);
    
    cout << "Enter edges (u v weight):\n";
    for (int i = 0; i < E; i++) {
        int u, v, weight;
        cin >> u >> v >> weight;
        g.addEdge(u, v, weight);
    }
    
    int st;
    cout << "Enter starting vertex: ";
    cin >> st;
    
    if (st < 0 || st >= V) {
        cout << "Invalid starting vertex!" << endl;
        return 1;
    }
    
    g.primMST(st);
    
    return 0;
}
